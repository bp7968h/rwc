// #[derive(Debug)]
// struct Options {
//     file_name: String,
//     flags: Vec<String>,
// }

// impl Options {
//     fn build() -> Result<Options, &'static str> {
//         let args: Vec<String> = env::args().collect();
//         if args.len() <= 1{
//             return Err("Not enough Parameters");
//         }

//         let mut file_name: String = String::new();
//         let mut flags: Vec<String> = Vec::new();

//         for arg in args[1..].iter(){
//             if arg.starts_with("-") {
//                 flags.push(arg.clone());
//             }else {
//                 file_name = arg.clone();
//             }
//         }

//         Ok(Options {file_name, flags})
//     }
// }

// #[derive(Debug)]
// struct CmdResults{
//     data: String,
//     metrics: Vec<usize>
// }

// impl CmdResults{

//     fn read_file(file: &String) -> Result<CmdResults, Error>{
//         let data = fs::read_to_string(file)?;
//         Ok(CmdResults {data, metrics: Vec::new()})
//     }

//     fn get_metrics(&mut self, flags: &[String]) -> String {
//         let mut result: String = String::new();
//         if flags.is_empty(){
//             result.push_str(&format!("{} {} {}", content.lines().count(), content.split_whitespace().count(), content.len()));
//             return result
//         }
//         for flag in flags {
//             match flag.as_str() {
//                 "-c" => result.push_str(&format!(" {:?}", content.len())),
//                 "-l" => result.push_str(&format!(" {:?}", content.lines().count())),
//                 "-w" => result.push_str(&format!(" {:?}", content.split_whitespace().count())),
//                 "-m" => result.push_str(&format!(" {:?}", content.chars().count())),
//                 _ => ()
//             }
//         }
//         result
//     }
// }